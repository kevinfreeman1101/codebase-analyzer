import ast
import logging
from pathlib import Path
from .base import FeatureExtractor

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


class ComplexityFeatureExtractor(FeatureExtractor):
    def __init__(self):
        self.metrics = self._get_default_metrics()

    def extract(self, file_path):
        logging.info(
            "Extracting complexity for: %s (type: %s)", file_path, type(file_path)
        )
        try:
            if isinstance(file_path, Path):
                file_path = str(file_path)  # Convert Path to string
            with open(file_path, "r", encoding="utf-8") as file:
                code = file.read()
            tree = ast.parse(code)
            complexity = self._calculate_cognitive_complexity(tree)
            self.metrics["cognitive_complexity"].append(complexity)
            return self.metrics
        except Exception as e:
            logging.error("Error extracting complexity for %s: %s", file_path, str(e))
            raise

    def get_feature_names(self):
        pass

    def _calculate_mean_complexity(self, *args):
        pass

    def _calculate_max_complexity(self, *args):
        pass

    def _get_complexity_distribution(self, *args):
        pass

    def _calculate_cognitive_complexity(self, tree):
        return 1  # Stub

    def _calculate_halstead_metrics(self, *args):
        pass

    def _calculate_avg_function_length(self, *args):
        pass

    def _get_default_metrics(self):
        return {"cognitive_complexity": []}


class ComplexityVisitor(ast.NodeVisitor):
    def visit_If(self, node):
        pass

    def visit_While(self, node):
        pass

    def visit_For(self, node):
        pass

    def visit_Try(self, node):
        pass
